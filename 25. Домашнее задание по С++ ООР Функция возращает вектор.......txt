//Напишите функцию, которая возвращает вектор(список в Python), каждый элемент которого представляет один бит 32 - битного целого числа без знака / знака таким образом, чтобы при печати он отображался как двоичное представление целого числа(наименее значащий бит справа) .
//
//например 1 = 000000000000000000000000000000001
//
//Назначьте 1 или 0 элементу вектора в зависимости от того, является ли бит в соответствующей позиции 1 или 0.
//
//Например:
//
//showBits(1);
//вернет следующее :
//
//vector<int> bits = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 };
//-1, с другой стороны, будет содержать все единицы :
//
//showBits(-1);
//vector<int> bits = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };
//Функция принимает один аргумент(n), представляющий собой целое число, которое необходимо преобразовать в двоичное.
//
//
//Решение задачи : https://www.codewars.com/kata/5a5f3034cadebf76db000023
//Перед тем как перейти по ссылке нужно зарегистрироваться.
#include <iostream>
#include<vector>
#include <bitset>
using namespace std;

//Функция переворачивает переданный bitset и возвращает ссылку не него же
template<int s>
bitset<s>& conversion_to_bits(bitset<s>& bst)
{
    bool temp;
    for (int i = 0, size = bst.size();i < size ;i++)
    {//Проходим по первой половине массива
         //Меняем местами элементы (первый с последним, второй с предпоследним и .т.д)
        temp = bst[i];
        bst[i] = bst[size - i - 1];
        bst[size - i - 1] = temp;
    }
    return bst;
}

int main()
{
    vector<int> vect;
    vect.push_back(500);//Записываем в вектор три числа
    vect.push_back(1);
    vect.push_back(-1);
    bitset<sizeof(int) * 8> bit_out;//битовый массив из STL
    for (int i = 0;i < vect.size();i++) 
    {//Проходим по всем элементав вектора
        bit_out = vect[i]; //Пихаем текущее значение в векторе в bitset
        cout << conversion_to_bits(bit_out) << endl;//Переворачиваем элементы в Bitset и выводим содержимое в поток cout
    }
    cout << endl;
    return 0;
}
