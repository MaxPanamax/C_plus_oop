К уже реализованным классам Точка, Дробь, Человек добавьте
механизм делегирования конструкторов и возможность получения 
количества созданных объектов этих классов
_________________________________________________
1.Точка
________________________
#include <iostream>
#include <Windows.h>
#include <fstream>

using namespace std;

class Point
{

public:
	int X, Y, Z;

	Point() { X = Y = Z = 0; }
	//-----------------------------------------------------
	//Добавил конструкторы делегирования 
	Point(int X, int Y, int Z) :X{ X }, Y{ Y }, Z{ X } {}
	
	Point(int X):Point{X,0,0}{}
	Point(int X,int Y) :Point{ X,Y,0 } {}
	
	//------------------------------------------------------

	void Print()
	{
		cout << " x: " << X << " y: " << Y << " z: " << Z << endl;
	}
	void setX(int koordin)
	{
		X = koordin;
	}
	int getX()
	{
		return X;
	}
	void setY(int koordin)
	{
		Y = koordin;
	}
	int getY()
	{
		return Y;
	}
	void setZ(int koordin)
	{
		Z = koordin;
	}
	int getZ()
	{
		return Z;
	}

	inline void Vvod()
	{
		cout << " Введите значения координат точек X,Y,Z:  " << endl;
		cin >> X;cin >> Y;cin >> Z;
	}
	inline void Vyvod()
	{
		cout << " X = " << X << endl;
		cout << " Y = " << Y << endl;
		cout << " Z = " << Z << endl;
	}


	~Point() {};
	void Vpisanie_v_blaknot(string Path, Point Koord)
	{

		ofstream fout;
		fout.open(Path, ofstream::app);
		if (!fout.is_open())
		{
			cout << " Ошибка открытия файла" << endl;
		}
		else
		{
			cout << " Файл открыт! " << endl;
			fout.write((char*)&Koord, sizeof(Point));
		}
		fout.close();
	}

	void Vypishit_iz_blaknot(string Path)
	{
		ifstream fin;
		fin.open(Path);
		if (!fin.is_open())
		{
			cout << " Ошибка открытия файла" << endl;
		}
		else
		{
			cout << " Файл открыт! " << endl;
			Point pnt;
			while (fin.read((char*)&pnt, sizeof(Point)))
			{
				pnt.Print();
			}

		}
		fin.close();
	}
};


int main()
{
	system("chcp 1251");
	Point koordinaty32;
	koordinaty32.Print();
	Point koordinaty30{ 8 };
	koordinaty32.Print();
	Point koordinaty35{ 8,7 };
	koordinaty35.Print();
	Point koordinaty40{ 8,7,2 };
	koordinaty40.Print();
	Point Koordinaty1;
	Koordinaty1.Vvod();
	Koordinaty1.Vyvod();
	// Запись файла в блокнот и взятие его от туда для консоли
	string path = "myFile.txt";

	//То что мы заполненли с консоли
	Koordinaty1.Vpisanie_v_blaknot(path, Koordinaty1);
	Koordinaty1.Vypishit_iz_blaknot(path);
	return 0;
}
_____________________________
2.Дробь
___________________________________-
#include <iostream>
#include <Windows.h>   //Для снижения 
//дополнительных расходов в С++ предусмотрены встроенные функции(inline - functions).


using namespace std;

class Fraction//Дробь
{
private:
	//Числитель и знаменатель
	int numerator, denominator, numerator2, denominator2;
public:
	//-----------------------------------------------------
	//Добавил конструкторы делегирования 
	Fraction(int numerator, int denominator, int numerator2, int denominator2)
		: numerator{numerator}, denominator{denominator}, numerator2{ numerator2 }, denominator2{ denominator2 }{}
	Fraction():Fraction{0,0,0,0}{}
	Fraction(int numerator) :Fraction{ numerator ,0,0,0 } {}
	Fraction(int numerator, int denominator) :Fraction{ numerator ,denominator,0,0 } {}
	Fraction(int numerator, int denominator, int numerator2) :Fraction{ numerator ,denominator, numerator2,0 } {}
	void print()
	{
		cout<<"Числитель первой дроби: "<< numerator<<endl << "Знаменатель первой дроби: "<<denominator<<endl 
			<<"Числитель второй дроби: "<< numerator2<<endl <<"Знаменателль второй дроби: " <<denominator2<<endl;
	}
 
	int getnumerator()
	{
		return numerator;
	}
	int getdenominator()
	{
		return denominator;
	}
	int getnumerator2()
	{
		return numerator2;
	}
	int getdenominator2()
	{
		return denominator2;
	}
	void Menu_Actions()//меню действия 
	{
		char Action;//Дествие
		
		cout << "Какие действие с дробями вы хотите выполнить? выбирите действия: (Сложение[+],Вычитание[-],Умножение[*],Деление[/])" << endl;
		cin >> Action;
		if (Action == '+')
		{
			Addition();
		}
		if (Action == '-')
		{
			Subtraction();
		}
		if (Action == '*')
		{
			Multiplication();
		}
		if (Action == '/')
		{
			Division();
		}
	}

	void Addition()//Сложение 
	{
		int Meaning_Numerator = 0;//Значение числителя
		int  Meaning_Denominator = 0;//Значение знаменателя
		cout << " Сложение дробей: " << endl;
		cout << numerator << "/" << denominator << "  +  " << numerator2 << "/" << denominator2 << endl;
		if (denominator == denominator2)
		{
			Meaning_Numerator = numerator + numerator2;
			cout << " = " << Meaning_Numerator << "/" << denominator << endl;
		}
		if (denominator != denominator2)//Приводит к одному знаменателю
		{
			Meaning_Denominator = denominator * denominator2;


			Meaning_Numerator = (numerator * denominator2) + (numerator2 * denominator);
			cout << " = " << Meaning_Numerator << "/" << Meaning_Denominator << endl;

		}
	}
	void Subtraction()//Вычитание   
	{
		int Meaning_Numerator = 0;//Значение числителя
		int  Meaning_Denominator = 0;//Значение знаменателя
		cout << " Вычитание дробей: " << endl;
		cout << numerator << "/" << denominator << "  -  " << numerator2 << "/" << denominator2 << endl;
		if (denominator == denominator2)
		{
			Meaning_Numerator = numerator - numerator2;
			cout << " = " << Meaning_Numerator << "/" << denominator << endl;
		}
		if (denominator != denominator2)//Приводи к одному знаменателю
		{
			Meaning_Denominator = denominator * denominator2;


			Meaning_Numerator = (numerator * denominator2) - (numerator2 * denominator);
			cout << " = " << Meaning_Numerator << "/" << Meaning_Denominator << endl;

		}
	}
	void Multiplication()//Умножение  
	{
		int Meaning_Numerator = 0;//Значение числителя
		int  Meaning_Denominator = 0;//Значение знаменателя
		cout << " Умножение дробей: " << endl;
		cout << numerator << "/" << denominator << "  *  " << numerator2 << "/" << denominator2 << endl;
		if (denominator == denominator2)
		{
			Meaning_Numerator = numerator * numerator2;
			cout << " = " << Meaning_Numerator << "/" << denominator << endl;
		}
		if (denominator != denominator2)//Перемножаем знаменатели и числител
		{
			Meaning_Denominator = denominator * denominator2;


			Meaning_Numerator = numerator * numerator2;
			cout << " = " << Meaning_Numerator << "/" << Meaning_Denominator << endl;

		}
	}
	inline void Division()//Деление  //Метод с inline
	{
		int Meaning_Numerator = 0;//Значение числителя
		int  Meaning_Denominator = 0;//Значение знаменателя
		cout << " Деление дробей: " << endl;
		cout << numerator << "/" << denominator << "  /  " << numerator2 << "/" << denominator2 << endl;
		if (denominator == denominator2)
		{
			Meaning_Numerator = numerator / numerator2;
			cout << " = " << Meaning_Numerator << "/" << denominator << endl;
		}
		if (denominator != denominator2)//Переворачиваем одну дробь и перемножаем
		{
			Meaning_Denominator = denominator * numerator2;


			Meaning_Numerator = numerator * denominator2;
			cout << " = " << Meaning_Numerator << "/" << Meaning_Denominator << endl;

		}
	}
	~Fraction() {}
};

int main()
{
	system("chcp 1251");
	
	Fraction Exemple22{ 3 };
	Exemple22.print();
	Exemple22.Menu_Actions();
	cout << endl << endl;
	Fraction Exemple24{ 3,4 };
	Exemple24.print();
	Exemple24.Menu_Actions();
	cout << endl << endl;
	Fraction Exemple25{ 3,4,6 };
	Exemple25.print();
	Exemple25.Menu_Actions();
	cout << endl << endl;
	Fraction Exemple27{ 3,4,6,8 };
	Exemple27.print();
	Exemple27.Menu_Actions();
	
	return 0;
}
_______________________________________
3.Человек
___________________________-
#include <iostream>
#include <Windows.h>
#include <string.h>


using namespace std;

class Humen
{
private:
	char* FIO;//ФИО
	int age;//Возраст
	char floor;//Пол
	

public:


	//----------------------------------
	void setFIO(const char mas[])
	{
		strcpy_s(FIO, 50, mas);
	}
	char* getFIO()
	{
		return FIO;
	}
	//------------------------------------
	void setage(int m)
	{
		age = m;
	}
	int getage()
	{
		return age;
	}
	//-----------------------------------
	void setfloor(char m)
	{
		floor = m;
	}
	char getfloor()
	{
		return floor;
	}
	//------------------------------------
	

	Humen(const char* FIO1,int age1,char floor1)
		:FIO{ FIO1 ? new  char[strlen(FIO1) + 1]
		: nullptr }, 
		age{ age1 },
		floor{ floor1 }
		{
			if(FIO)
			{
				strcpy_s(FIO, strlen(FIO1) + 1, FIO1);
			}
		cout << "[пустая личность]" << endl;
	   }

	Humen() : Humen{ nullptr,0,0 } {}
	Humen(const char* FIO1) : Humen{ FIO1,0,0 } {}
	Humen(const char* FIO1,  int age1) : Humen{ FIO1,age1,0 } {}
	//----------------------------------
	~Humen()
	{
		delete[] FIO;
	

		cout << "Humen деструктор" << endl;
	}
	void print()
	{
	
		if (FIO)
		{
			cout << "ФИО: " << FIO << endl <<
				"Возраст: " << age << endl <<
				"Пол: " << floor << endl;
		}
		else
		{
			cout << "[пустая личность]" << endl;
		}
		
	}

};

int main()
{

	system("chcp 1251");
	Humen Worker;
	Worker.print();
	Humen Woker1{ "Иванов И.И." };
	Woker1.print();
	Humen Woker3{ "Иванов И.И.",35 };
	Woker3.print();
	Humen Woker4{ "Иванов И.И.",35,'м' };
	Woker4.print();
	return 0;
}
__________________________________---
4. Человек с двчумя массивами
________________________________
#include <iostream>
#include <Windows.h>
#include <string.h>


using namespace std;

class Humen
{
private:
	char* FIO;//ФИО
	int age;//Возраст
	char floor;//Пол
	char* post;//Занимаемая должность

public:


	//----------------------------------
	void setFIO(const char mas[])
	{
		strcpy_s(FIO, 50, mas);
	}
	char* getFIO()
	{
		return FIO;
	}
	//------------------------------------
	void setage(int m)
	{
		age = m;
	}
	int getage()
	{
		return age;
	}
	//-----------------------------------
	void setfloor(char m)
	{
		floor = m;
	}
	char getfloor()
	{
		return floor;
	}
	//------------------------------------
	void setpost(const char mas[])
	{
		strcpy_s(post, 50, mas);
	}
	char* getpost()
	{
		return post;
	}

	//-----------------------------------

	Humen(const char* FIO1, int age1, char floor1, const char* post1)
		:FIO{ FIO1 ? new  char[strlen(FIO1) + 1]
		: nullptr },
		age{ age1 },
		floor{ floor1 },
		post{ post1 ? new  char[strlen(post1) + 1]
	   : nullptr }
	{
		if (FIO)
		{
			strcpy_s(FIO, strlen(FIO1) + 1, FIO1);
		}
		else {
			cout << "[пустое ФИО]" << endl;
		}

		if (post)
		{
			strcpy_s(post, strlen(post1) + 1, post1);
		}
		

	}

	Humen() : Humen{ nullptr,0,0,nullptr } {}
	Humen(const char* FIO1) : Humen{ FIO1,0,0,nullptr } {}
	Humen(const char* FIO1, int age1) : Humen{ FIO1,age1,0,nullptr } {}
	Humen(const char* FIO1, int age1, char floor1) : Humen{ FIO1,age1,floor1,nullptr } {}

	//----------------------------------
	~Humen()
	{
		delete[] FIO;
		delete[] post;

		cout << endl << "Humen деструктор" << endl;
	}
	void print()
	{

		if (FIO)
		{
			cout << "ФИО: " << FIO << endl <<
				"Возраст: " << age << endl <<
				"Пол: " << floor << endl;
			if (post == nullptr)
			{
				cout << "Должность: нет должности";
			}
			else {
				cout << "Должность: " << post;
			}
		}
		else
		{
			cout << "[пустая личность]" << endl;
		}

	}

};

int main()
{

	system("chcp 1251");
	Humen Worker;
	Worker.print();
	cout << endl<<endl;
	Humen Woker1{ "Иванов И.И." };
	Woker1.print();
	cout << endl << endl;;
	Humen Woker3{ "Иванов И.И.",35 };
	Woker3.print();
	cout << endl<<endl;
	Humen Woker4{ "Иванов И.И.",35,'м' };
	Woker4.print();
	cout << endl<<endl;
	Humen Woker6{ "Иванов И.И.",35,'м',"Спициалист" };
	Woker6.print();
	cout << endl;
	return 0;
}
_____________________________________-

